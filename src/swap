#!/usr/bin/env python3

"""
Swaps a student with another random one.

For more information - view staff-bin/hitme/README.md.

Chami Lamelas
Summer 2023
"""

from hitme import HitMeDatabase, HitMeColumn, hitmeassert, HitMeStatus, HitMeException
import misc
import getpass
from hitmeconfig import get_assignment
import os 

DESCRIPTION = """
Run this script to trade in a student with another.

- You need to have been assigned the student by hitme (so check
  viewprogress).
- There needs to be at least one available student that can be
  given to you (who is not in progress or done).
"""

if __name__ == "__main__":
    student = misc.get_one_argument(
        "student",
        "Student email (for multiple students, separate emails by a comma with no space)",
        misc.help(DESCRIPTION),
        misc.lower
    )
    user = getpass.getuser()
    db = None
    try:
        assignment = get_assignment()
        db = HitMeDatabase(assignment, os.path.basename(__file__))
        db.acquire_writelock()
        db.load()

        # TAs can only swap students they are assigned
        # who have not been marked done
        row = db.get(
            HitMeColumn.STUDENT_IDS,
            student,
            [HitMeColumn.GRADER, HitMeColumn.STATUS],
            empty_error=f"There is no entry for {student} in HitMe database for {assignment}.",
        )[0]
        hitmeassert(
            row[HitMeColumn.GRADER] == user,
            f"{user} is not the assigned grader of {student}.",
        )
        hitmeassert(
            row[HitMeColumn.STATUS] != HitMeStatus.COMPLETE,
            f"{student} has already been marked done.",
        )

        new_row = db.get(
            HitMeColumn.STATUS,
            HitMeStatus.NOT_STARTED,
            [
                HitMeColumn.STUDENT_NAMES,
                HitMeColumn.STUDENT_IDS,
                HitMeColumn.GRADESCOPE_URL,
            ],
            limit=1,
            empty_error=f"There are no unassigned students for {db.assignment}",
        )[0]

        db.set(
            HitMeColumn.STUDENT_IDS,
            student,
            [HitMeColumn.GRADER, HitMeColumn.STATUS],
            [None, HitMeStatus.NOT_STARTED],
        )

        db.set(
            HitMeColumn.STUDENT_IDS,
            new_row[HitMeColumn.STUDENT_IDS],
            [HitMeColumn.STATUS, HitMeColumn.GRADER],
            [HitMeStatus.IN_PROGRESS, user],
        )

        misc.green(
            f"You are now assigned {new_row[HitMeColumn.STUDENT_NAMES]} ({new_row[HitMeColumn.STUDENT_IDS]}):\n{new_row[HitMeColumn.GRADESCOPE_URL]}\nYou are no longer assigned {student}."
        )
    except HitMeException as e:
        misc.red(str(e))
    finally:
        if db is not None:
            db.release_writelock()
